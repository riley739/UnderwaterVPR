"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct
import numpy as np

class ImagingSonar(object):
    """ TODO: Optical Modem once we solidifed data types for it """

    __slots__ = ["timestamp", "bins_azimuth", "bins_range", "image"]

    __typenames__ = ["int64_t", "int32_t", "int32_t", "float"]

    __dimensions__ = [None, None, None, ["bins_range", "bins_azimuth"]]

    def __init__(self):
        self.timestamp = 0
        """ LCM Type: int64_t """
        self.bins_azimuth = 0
        """ LCM Type: int32_t """
        self.bins_range = 0
        """ LCM Type: int32_t """
        self.image = []
        """ LCM Type: float[bins_range][bins_azimuth] """

    def encode(self):
        buf = BytesIO()
        buf.write(ImagingSonar._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qii", self.timestamp, self.bins_azimuth, self.bins_range))
        for i0 in range(self.bins_range):
            buf.write(struct.pack('>%df' % self.bins_azimuth, *self.image[i0][:self.bins_azimuth]))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != ImagingSonar._get_packed_fingerprint():
            raise ValueError("Decode error")
        return ImagingSonar._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = ImagingSonar()
        
        self.timestamp, self.bins_azimuth, self.bins_range = struct.unpack(">qii", buf.read(16))
        num_floats = self.bins_range * self.bins_azimuth
        raw_data = buf.read(num_floats * 4)

        # Read entire image buffer into NumPy array at once
        image = np.frombuffer(raw_data, dtype=">f4")  # big-endian float32
        image = image.reshape((self.bins_range, self.bins_azimuth))  # rows = range, cols = azimuth

        self.image = image
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if ImagingSonar in parents: return 0
        tmphash = (0x3c5e617d2bbe6ae8) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if ImagingSonar._packed_fingerprint is None:
            ImagingSonar._packed_fingerprint = struct.pack(">Q", ImagingSonar._get_hash_recursive([]))
        return ImagingSonar._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", ImagingSonar._get_packed_fingerprint())[0]

