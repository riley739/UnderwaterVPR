"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

from lcm_src.messages.Pose import Pose

class LoopClosure(object):

    __slots__ = ["query_pose", "pose1", "pose2", "pose3"]

    __typenames__ = ["Pose", "Pose", "Pose", "Pose"]

    __dimensions__ = [None, None, None, None]

    def __init__(self):
        self.query_pose = Pose()
        """ LCM Type: Pose """
        self.pose1 = Pose()
        """ LCM Type: Pose """
        self.pose2 = Pose()
        """ LCM Type: Pose """
        self.pose3 = Pose()
        """ LCM Type: Pose """

    def encode(self):
        buf = BytesIO()
        buf.write(LoopClosure._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.query_pose._get_packed_fingerprint() == Pose._get_packed_fingerprint()
        self.query_pose._encode_one(buf)
        assert self.pose1._get_packed_fingerprint() == Pose._get_packed_fingerprint()
        self.pose1._encode_one(buf)
        assert self.pose2._get_packed_fingerprint() == Pose._get_packed_fingerprint()
        self.pose2._encode_one(buf)
        assert self.pose3._get_packed_fingerprint() == Pose._get_packed_fingerprint()
        self.pose3._encode_one(buf)

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != LoopClosure._get_packed_fingerprint():
            raise ValueError("Decode error")
        return LoopClosure._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = LoopClosure()
        self.query_pose = Pose._decode_one(buf)
        self.pose1 = Pose._decode_one(buf)
        self.pose2 = Pose._decode_one(buf)
        self.pose3 = Pose._decode_one(buf)
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if LoopClosure in parents: return 0
        newparents = parents + [LoopClosure]
        tmphash = (0xf6c6563bfcded0af+ Pose._get_hash_recursive(newparents)+ Pose._get_hash_recursive(newparents)+ Pose._get_hash_recursive(newparents)+ Pose._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if LoopClosure._packed_fingerprint is None:
            LoopClosure._packed_fingerprint = struct.pack(">Q", LoopClosure._get_hash_recursive([]))
        return LoopClosure._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", LoopClosure._get_packed_fingerprint())[0]

