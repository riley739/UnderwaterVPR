"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class RangeFinderSensor(object):

    __slots__ = ["timestamp", "count", "distances", "angles"]

    __typenames__ = ["int64_t", "int32_t", "float", "float"]

    __dimensions__ = [None, None, ["count"], ["count"]]

    def __init__(self):
        self.timestamp = 0
        """ LCM Type: int64_t """
        self.count = 0
        """ LCM Type: int32_t """
        self.distances = []
        """ LCM Type: float[count] """
        self.angles = []
        """ LCM Type: float[count] """

    def encode(self):
        buf = BytesIO()
        buf.write(RangeFinderSensor._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qi", self.timestamp, self.count))
        buf.write(struct.pack('>%df' % self.count, *self.distances[:self.count]))
        buf.write(struct.pack('>%df' % self.count, *self.angles[:self.count]))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != RangeFinderSensor._get_packed_fingerprint():
            raise ValueError("Decode error")
        return RangeFinderSensor._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = RangeFinderSensor()
        self.timestamp, self.count = struct.unpack(">qi", buf.read(12))
        self.distances = struct.unpack('>%df' % self.count, buf.read(self.count * 4))
        self.angles = struct.unpack('>%df' % self.count, buf.read(self.count * 4))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if RangeFinderSensor in parents: return 0
        tmphash = (0x6fe5dbaa3d529ab8) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if RangeFinderSensor._packed_fingerprint is None:
            RangeFinderSensor._packed_fingerprint = struct.pack(">Q", RangeFinderSensor._get_hash_recursive([]))
        return RangeFinderSensor._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", RangeFinderSensor._get_packed_fingerprint())[0]

